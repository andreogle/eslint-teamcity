const utils = require('./utils');
const formatErrors = require('./formatters/errors');
const formatInspections = require('./formatters/inspections');

/**
 * Determines the config to be used by the respective formatter
 * Config is selected based on the following priority:
 *    1. Any user defined props when running eslint-teamcity
 *    2. package.json settings
 *    3. ENV variables
 *    4. Default value
 * @param {object} propNames Optional config variables that will override all other config settings
 * @returns {object} The final config settings to be used
 */
function getUserConfig(propNames) {
  // Attempt to load package.json from current directory
  const config = JSON.parse(utils.loadPackageJson())['eslint-teamcity'] || {};

  const reporter =
    propNames.reporter || config.reporter || process.env.ESLINT_TEAMCITY_REPORTER || 'errors';

  const reportName =
    propNames.reportName ||
    config['report-name'] ||
    process.env.ESLINT_TEAMCITY_REPORT_NAME ||
    'ESLint Violations';

  const errorStatisticsName =
    propNames.errorStatisticsName ||
    config['error-statistics-name'] ||
    process.env.ESLINT_TEAMCITY_ERROR_STATISTICS_NAME ||
    'ESLint Error Count';

  const warningStatisticsName =
    propNames.warningStatisticsName ||
    config['warning-statistics-name'] ||
    process.env.ESLINT_TEAMCITY_WARNING_STATISTICS_NAME ||
    'ESLint Warning Count';

  return {
    reporter,
    reportName: utils.escapeTeamCityString(reportName),
    errorStatisticsName: utils.escapeTeamCityString(errorStatisticsName),
    warningStatisticsName: utils.escapeTeamCityString(warningStatisticsName),
  };
}

/**
 * Determines the formatter to use and any config variables to use
 * @param {array} results The output generated by running ESLint.
 * @param {object} [propNames] Optional config variables that will override all other
 * config settings
 * @returns {string} The concatenated output of all messages to display in TeamCity
 */
function getTeamCityOutput(results, propNames) {
  const config = getUserConfig(propNames || {});

  if (process.env.ESLINT_TEAMCITY_DISPLAY_CONFIG) {
    console.info(`Running ESLint Teamcity with config: ${JSON.stringify(config, null, 4)}`);
  }

  let outputMessages = [];
  switch (config.reporter.toLowerCase()) {
    case 'inspections': {
      outputMessages = formatInspections(results, config);
      break;
    }
    case 'errors':
    default: {
      outputMessages = formatErrors(results, config);
      break;
    }
  }

  return outputMessages.join('\n');
}

module.exports = getTeamCityOutput;
